/**
 *        @file: tarray.template
 *      @author: Ethan Dowalter
 *        @date: July 23, 2020
 *       @brief: Implementation for a template container class
 */

#include <iostream>
#include <algorithm>
using namespace std;

template <class T>
Tarray<T>::Tarray(){
    data = new T [5];
    capacity = 5;
    used = 0;
    current_index = 0;
}

template <class T>
void Tarray<T>::add(T item){
    if (used == capacity)           //resize if array is full
    {
        resize();
    }
    data[used] = item;
    used++; 
}

template <class T>
void Tarray<T>::start(){
    current_index = 0;
}

template <class T>
bool Tarray<T>::is_item()const{
    if (current_index < used)
    {
        return true;
    }
    return false;
}

template <class T>
void Tarray<T>::advance(){
    current_index += 1;
}

template <class T>
T Tarray<T>::current()const{
    return data[current_index];
}

template <class T>
void Tarray<T>::remove_current(){
    data[current_index] = data[current_index + 1];
    for (size_t i = current_index + 1; i < used; i++)
    {
        data[i] = data[i + 1];          //shift the rest of the array to fill the gap
    }
    used--;
}

template <class T>
void Tarray<T>::resize(){
    T *tmp;
	tmp = new T [capacity + 5];
	copy(data, data+used, tmp);
	delete [] data;
	capacity += 5;
	data = tmp;
}
